Backport of:

From b727643cdf4e078f132a90e1c474a879a5760578 Mon Sep 17 00:00:00 2001
From: Steffan Karger <steffan.karger@fox-it.com>
Date: Tue, 9 May 2017 21:30:07 +0200
Subject: [PATCH] Drop packets instead of assert out if packet id rolls over
 (CVE-2017-7479)

Previously, if a mode was selected where packet ids are not allowed to roll
over, but renegotiation does not succeed for some reason (e.g. no password
entered in time, certificate expired or a malicious peer that refuses the
renegotiaion on purpose) we would continue to use the old keys.  Until the
packet ID would roll over and we would ASSERT() out.

Given that this can be triggered on purpose by an authenticated peer, this
is a fix for an authenticated remote DoS vulnerability.  An attack is
rather inefficient though; a peer would need to get us to send 2^32
packets (min-size packet is IP+UDP+OPCODE+PID+TAG (no payload), results in
(20+8+1+4+16)*2^32 bytes, or approx. 196 GB).

This is a fix for finding 5.2 from the OSTIF / Quarkslab audit.

CVE: 2017-7479
Signed-off-by: Steffan Karger <steffan.karger@fox-it.com>
Acked-by: Gert Doering <gert@greenie.muc.de>
Acked-by: David Sommerseth <davids@openvpn.net>
Message-Id: <1494358209-4568-1-git-send-email-steffan.karger@fox-it.com>
URL: http://www.mail-archive.com/search?l=mid&q=1494358209-4568-1-git-send-email-steffan.karger@fox-it.com
Signed-off-by: David Sommerseth <davids@openvpn.net>
---
 Changes.rst                               | 10 ++++++++++
 src/openvpn/crypto.c                      | 18 +++++++++++++-----
 src/openvpn/packet_id.c                   | 22 ++++++++++++++++------
 src/openvpn/packet_id.h                   |  1 +
 tests/unit_tests/openvpn/test_packet_id.c | 11 +++++++++--
 5 files changed, 49 insertions(+), 13 deletions(-)

#diff --git a/Changes.rst b/Changes.rst
#index 1c0154c46..183e9fa4a 100644
#--- a/Changes.rst
#+++ b/Changes.rst
#@@ -104,6 +104,16 @@ Behavioral changes
# 
# - Do not randomize resolving of IP addresses in getaddr()
# 
#+Version 2.3.15
#+==============
#+
#+Security fixes
#+--------------
#+- Fix an authenticated remote DoS vulnerability that could be triggered by
#+  causing a packet id roll over.  An attack is rather inefficient; a peer
#+  would need to get us to send at least about 196 GB of data.
#+  (OSTIF/Quarkslab audit finding 5.2, CVE-2017-7479)
#+
# Version 2.3.14
# ==============
# 
Index: openvpn-2.3.11/src/openvpn/crypto.c
===================================================================
--- openvpn-2.3.11.orig/src/openvpn/crypto.c	2017-06-22 09:03:24.309316314 -0400
+++ openvpn-2.3.11/src/openvpn/crypto.c	2017-06-22 09:03:24.305316271 -0400
@@ -112,9 +112,11 @@ openvpn_encrypt (struct buffer *buf, str
 		prng_bytes (iv_buf, iv_size);
 
 	      /* Put packet ID in plaintext buffer or IV, depending on cipher mode */
-	      if (opt->packet_id)
+	      if (opt->packet_id
+		  && !packet_id_write (&opt->packet_id->send, buf, BOOL_CAST (opt->flags & CO_PACKET_ID_LONG_FORM), true))
 		{
-		  ASSERT (packet_id_write (&opt->packet_id->send, buf, BOOL_CAST (opt->flags & CO_PACKET_ID_LONG_FORM), true));
+		  msg (D_CRYPT_ERRORS, "ENCRYPT ERROR: packet ID roll over");
+		  goto err;
 		}
 	    }
 	  else if (cipher_kt_mode_ofb_cfb(cipher_kt))
@@ -126,7 +128,11 @@ openvpn_encrypt (struct buffer *buf, str
 
 	      memset (iv_buf, 0, iv_size);
 	      buf_set_write (&b, iv_buf, iv_size);
-	      ASSERT (packet_id_write (&opt->packet_id->send, &b, true, false));
+	      if (!packet_id_write (&opt->packet_id->send, &b, true, false))
+		{
+		  msg (D_CRYPT_ERRORS, "ENCRYPT ERROR: packet ID roll over");
+		  goto err;
+		}
 	    }
 	  else /* We only support CBC, CFB, or OFB modes right now */
 	    {
@@ -185,9 +191,11 @@ openvpn_encrypt (struct buffer *buf, str
 	}
       else				/* No Encryption */
 	{
-	  if (opt->packet_id)
+	  if (opt->packet_id
+	      && !packet_id_write (&opt->packet_id->send, buf, BOOL_CAST (opt->flags & CO_PACKET_ID_LONG_FORM), true))
 	    {
-	      ASSERT (packet_id_write (&opt->packet_id->send, buf, BOOL_CAST (opt->flags & CO_PACKET_ID_LONG_FORM), true));
+	      msg (D_CRYPT_ERRORS, "ENCRYPT ERROR: packet ID roll over");
+	      goto err;
 	    }
 	  work = *buf;
 	}
Index: openvpn-2.3.11/src/openvpn/packet_id.c
===================================================================
--- openvpn-2.3.11.orig/src/openvpn/packet_id.c	2017-06-22 09:03:24.309316314 -0400
+++ openvpn-2.3.11/src/openvpn/packet_id.c	2017-06-22 09:03:24.305316271 -0400
@@ -294,27 +294,37 @@ packet_id_read (struct packet_id_net *pi
   return true;
 }
 
-static void
+static bool
 packet_id_send_update(struct packet_id_send *p, bool long_form)
 {
   if (!p->time)
     {
       p->time = now;
     }
-  p->id++;
-  if (!p->id)
+  if (p->id == PACKET_ID_MAX)
     {
-      ASSERT(long_form);
+      /* Packet ID only allowed to roll over if using long form and time has
+       * moved forward since last roll over.
+       */
+      if (!long_form || now <= p->time)
+        {
+            return false;
+        }
       p->time = now;
-      p->id = 1;
+      p->id = 0;
     }
+    p->id++;
+    return true;
 }
 
 bool
 packet_id_write (struct packet_id_send *p, struct buffer *buf, bool long_form,
         bool prepend)
 {
-  packet_id_send_update(p, long_form);
+  if (!packet_id_send_update(p, long_form))
+    {
+      return false;
+    }
 
   const packet_id_type net_id = htonpid(p->id);
   const net_time_t net_time = htontime(p->time);
Index: openvpn-2.3.11/src/openvpn/packet_id.h
===================================================================
--- openvpn-2.3.11.orig/src/openvpn/packet_id.h	2017-06-22 09:03:24.309316314 -0400
+++ openvpn-2.3.11/src/openvpn/packet_id.h	2017-06-22 09:03:24.305316271 -0400
@@ -50,6 +50,7 @@
  * to for network transmission.
  */
 typedef uint32_t packet_id_type;
+#define PACKET_ID_MAX UINT32_MAX
 typedef uint32_t net_time_t;
 
 /*
